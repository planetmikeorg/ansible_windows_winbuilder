---
- name: Checking hostname
  win_hostname:
    name: "{{ ansible_hostname }}"
  register: res

- name: Reboot if name changed
  win_reboot:
    reboot_timeout: 3600
  when: res.reboot_required

- name: Copy scripts
  win_copy:
    src: "Builder"
    dest: "{{ win_build_base }}\\"

- name: Copy Globals
  template:
    src: Globals.j2
    dest: "{{ win_build_base }}\\Builder\\Globals.ps1"

- block:
    - name: Check if Chocolatey is installed
      win_shell: choco -v
      register: choco_installed
      ignore_errors: yes

    - name: Install Chocolatey
      win_shell: |
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      when: choco_installed.rc != 0


- block:
    - name: Adding Windows Roles and Features
      win_feature:
        name:
          - FS-FileServer
          - FS-Data-Deduplication
          - FS-VSS-Agent
          - RSAT-AD-PowerShell
          - SNMP-Service
          - SNMP-WMI-Provider
          - Windows-Server-Backup
          - RSAT-SNMP
        include_sub_features: yes
        include_management_tools: yes
        state: present
      register: win_feature

    - name: Reboot if feature requires
      win_reboot:
        reboot_timeout: 3600
      when: win_feature.reboot_required

- name: Disable use Enhanced Exit Codes
  win_chocolatey_feature:
    name: useEnhancedExitCodes
    state: disabled

- block:
    - name: Create source directories
      win_file:
        path: "{{ win_build_base }}\\{{ item.path }}"
        state: directory
      loop:
        - { path: "Builder\\SourceWims\\boot" }
        - { path: "Builder\\SourceWims\\10.0" }
        - { path: "Builder\\Drivers\\10.0" }
        - { path: "Builder\\Drivers\\boot" }
        - { path: "Builder\\bootinject\\Deploy" }
        - { path: "Builder\\bootinject\\Windows\\System32" }
        - { path: "Tools" }
        - { path: "ISO" }

    - name: Create deployment directories
      win_file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ win_build_deploy }}"
        - "{{ win_build_base}}\\wim" 

- name: Download Windows Server media
  win_get_url:
    url: "{{ win_build_ws_iso }}"
    dest: "{{ win_build_base }}\\ISO\\MS-WS2022.ISO"
    force: no

- block:
    - name: Load Windows Server DVD
      win_disk_image:
        image_path: "{{ win_build_base }}\\ISO\\MS-WS2022.ISO"
        state: present
      register: image_dvd

    - name: Copy Windows install image and Roles sources
      win_copy:
        src: "{{ image_dvd.mount_paths[0] }}sources\\{{ item.src }}"
        dest: "{{ win_build_base }}\\{{ item.dest }}"
        remote_src: yes
        force: no
      loop:
        - { src: "install.wim", dest: "Builder\\SourceWims\\10.0\\install.wim" }
        - { src: "sxs", dest: "Windows\\2022\\" }

    - name: Unload Windows Server DVD
      win_disk_image:
        image_path: "{{ win_build_base }}\\ISO\\MS-WS2022.ISO"
        state: absent

- name: Copy WinPE Boot image
  win_copy:
    src: "C:\\Program Files (x86)\\Windows Kits\\10\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\en-us\\winpe.wim"
    dest: "{{ win_build_base }}\\Builder\\SourceWims\\boot\\boot.wim"
    remote_src: yes
    force: no

# Similar pattern can be followed for other copy tasks

- block:
    - name: Copy deployment files
      win_copy:
        src: "C:\\Program Files (x86)\\Windows Kits\\10\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\Media\\{{ item.src }}"
        dest: "{{ win_build_deploy }}\\boot\\{{ item.dest }}"
        remote_src: yes
      loop:
        - { src: "Boot", dest: "" }
        - { src: "bootmgr", dest: "bootmgr" }

    - name: Download and prepare wimboot
      win_get_url:
        url: "{{ win_build_wimbooturl }}"
        dest: "{{ win_build_base }}\\Tools\\wimboot-1.0.5.zip"
        force: no

    - name: Unzip wimboot
      win_unzip:
        src: "{{ win_build_base }}\\Tools\\wimboot-1.0.5.zip"
        dest: "{{ win_build_base }}\\Tools\\"
        creates: "{{ win_build_base }}\\Tools\\wimboot-1.0.5"

    - name: Copy wimboot into place
      win_copy:
        src: "{{ win_build_base }}\\Tools\\wimboot-1.0.5\\wimboot"
        dest: "{{ win_build_deploy }}\\boot\\wimboot"
        remote_src: yes

- name: Install deployment packages
  win_chocolatey:
    name: "{{ item }}"
    state: present
  loop:
    - winscp
    - git
    - vscode
    - mdt
    - windows-adk
    - windows-adk-winpe

- name: Customize WIM 
  import_tasks: build_wim.yml 

- name: Configure deployment share
  import_tasks: deploy-share.yml
  when: win_build_share_cifs

- name: Configure deployment web service
  import_tasks: deploy-iis.yml
  when: win_build_share_iis
